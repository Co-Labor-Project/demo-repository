{"version":3,"sources":["../src/use-navermaps.ts","../src/contexts/client-options.ts","../src/load-navermaps-script.tsx","../src/utils/load-script.ts"],"sourcesContent":["import { suspend } from 'suspend-react';\n\nimport { useClientOptions } from './contexts/client-options';\nimport { loadNavermapsScript } from './load-navermaps-script';\nimport type { ClientOptions } from './types/client';\n\nasync function load(options?: ClientOptions): Promise<typeof naver.maps> {\n  if (typeof window !== 'undefined' && window.naver?.maps) {\n    return window.naver.maps;\n  }\n\n  if (!options) {\n    throw new Error('react-naver-maps: set options with `useNavermaps.config`');\n  }\n\n  return await loadNavermapsScript(options);\n}\n\nexport function useNavermaps() {\n  if (typeof window === 'undefined') {\n    throw new Error('react-naver-maps: browser');\n  }\n\n  /**\n   * TODO: Provider option 이 변경될 경우 클리어하는 로직 필요\n   * ex) submodule 에 파노라마 추가시 window.naver.maps가 존재하므로 새로 로드하지 않음\n   */\n  if (window.naver?.maps) {\n    return window.naver.maps;\n  }\n\n  const options = useClientOptions();\n\n  return suspend(load, [options, 'react-naver-maps/loadClient']);\n}\n\n// useNavermaps.preload = (options: any) => {\n//   if (!window) {\n//     return;\n//   }\n\n//   return preload(load, [options, 'react-naver-maps/loadClient']);\n// };\n\n// useNavermaps.clear = (options: any) => {\n//   return clear([options, 'react-naver-maps/loadClient']);\n// };\n","import { createContext, useContext } from 'react';\n\nimport type { ClientOptions } from '../types/client';\n\nexport const ClientOptionsContext = createContext<ClientOptions>({} as ClientOptions);\nexport const useClientOptions = () => useContext(ClientOptionsContext);\n","import { useEffect, useState } from 'react';\nimport type { ReactElement } from 'react';\n\nimport type { ClientOptions } from './types/client';\nimport { loadScript } from './utils/load-script';\n\nexport function loadNavermapsScript(options: ClientOptions) {\n  const url = makeUrl(options);\n\n  // TODO: Caching Promise\n\n  const promise = loadScript(url).then(() => {\n    const navermaps = window.naver.maps;\n\n    if (navermaps.jsContentLoaded) {\n      return navermaps;\n    }\n\n    return new Promise<typeof naver.maps>(resolve => {\n      navermaps.onJSContentLoaded = () => {\n        resolve(navermaps);\n      };\n    });\n  });\n\n  return promise;\n}\n\nfunction makeUrl(options: ClientOptions) {\n  const submodules = options.submodules;\n\n  const clientIdQuery = 'ncpClientId' in options\n    ? `ncpClientId=${options.ncpClientId}`\n    : 'govClientId' in options\n      ? `govClientId=${options.govClientId}`\n      : 'finClientId' in options\n        ? `finClientId=${options.finClientId}`\n        : undefined;\n\n  if (!clientIdQuery) {\n    throw new Error('react-naver-maps: ncpClientId, govClientId or finClientId is required');\n  }\n\n  let url = `https://oapi.map.naver.com/openapi/v3/maps.js?${clientIdQuery}`;\n\n  if (submodules) {\n    url += `&submodules=${submodules.join(',')}`;\n  }\n\n  return url;\n}\n\ntype Props = ClientOptions & {\n  children: () => ReactElement;\n};\n\nexport function LoadNavermapsScript({\n  children: Children,\n  ...options\n}: Props) {\n  const [navermaps, setNavermaps] = useState<typeof naver.maps>();\n\n  useEffect(() => {\n    loadNavermapsScript(options).then((maps) => {\n      setNavermaps(maps);\n    });\n  }, []);\n\n  return (\n    (navermaps && Children) ? <Children /> : null\n  );\n}\n","import _loadScript from 'load-script';\n\nexport function loadScript(src: string): Promise<HTMLScriptElement> {\n  return new Promise((resolve, reject) => {\n    _loadScript(src, (err, script) => {\n      if (err) reject(err);\n      else resolve(script);\n    });\n  });\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAwB;;;ACAxB,mBAA0C;AAInC,IAAM,2BAAuB,4BAA6B,CAAC,CAAkB;AAC7E,IAAM,mBAAmB,UAAM,yBAAW,oBAAoB;;;ACLrE,IAAAA,gBAAoC;;;ACApC,yBAAwB;AAEjB,SAAS,WAAW,KAAyC;AAClE,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,2BAAAC,SAAY,KAAK,CAAC,KAAK,WAAW;AAChC,UAAI;AAAK,eAAO,GAAG;AAAA;AACd,gBAAQ,MAAM;AAAA,IACrB,CAAC;AAAA,EACH,CAAC;AACH;;;AD4D8B;AA/DvB,SAAS,oBAAoB,SAAwB;AAC1D,QAAM,MAAM,QAAQ,OAAO;AAI3B,QAAM,UAAU,WAAW,GAAG,EAAE,KAAK,MAAM;AACzC,UAAM,YAAY,OAAO,MAAM;AAE/B,QAAI,UAAU,iBAAiB;AAC7B,aAAO;AAAA,IACT;AAEA,WAAO,IAAI,QAA2B,aAAW;AAC/C,gBAAU,oBAAoB,MAAM;AAClC,gBAAQ,SAAS;AAAA,MACnB;AAAA,IACF,CAAC;AAAA,EACH,CAAC;AAED,SAAO;AACT;AAEA,SAAS,QAAQ,SAAwB;AACvC,QAAM,aAAa,QAAQ;AAE3B,QAAM,gBAAgB,iBAAiB,UACnC,eAAe,QAAQ,gBACvB,iBAAiB,UACf,eAAe,QAAQ,gBACvB,iBAAiB,UACf,eAAe,QAAQ,gBACvB;AAER,MAAI,CAAC,eAAe;AAClB,UAAM,IAAI,MAAM,uEAAuE;AAAA,EACzF;AAEA,MAAI,MAAM,iDAAiD;AAE3D,MAAI,YAAY;AACd,WAAO,eAAe,WAAW,KAAK,GAAG;AAAA,EAC3C;AAEA,SAAO;AACT;;;AF5CA,eAAe,KAAK,SAAqD;AANzE;AAOE,MAAI,OAAO,WAAW,iBAAe,YAAO,UAAP,mBAAc,OAAM;AACvD,WAAO,OAAO,MAAM;AAAA,EACtB;AAEA,MAAI,CAAC,SAAS;AACZ,UAAM,IAAI,MAAM,0DAA0D;AAAA,EAC5E;AAEA,SAAO,MAAM,oBAAoB,OAAO;AAC1C;AAEO,SAAS,eAAe;AAlB/B;AAmBE,MAAI,OAAO,WAAW,aAAa;AACjC,UAAM,IAAI,MAAM,2BAA2B;AAAA,EAC7C;AAMA,OAAI,YAAO,UAAP,mBAAc,MAAM;AACtB,WAAO,OAAO,MAAM;AAAA,EACtB;AAEA,QAAM,UAAU,iBAAiB;AAEjC,aAAO,8BAAQ,MAAM,CAAC,SAAS,6BAA6B,CAAC;AAC/D;","names":["import_react","_loadScript"]}