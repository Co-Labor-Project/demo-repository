import * as react from 'react';
import { UIEventHandlers } from '../types/event.js';

declare const uiEvents: readonly ["mousedown", "mouseup", "click", "dblclick", "rightclick", "mouseover", "mouseout", "mousemove"];
declare type CircleOptions = {
    /**
     * center
     * @type naver.maps.Coord | naver.maps.CoordLiteral
     */
    center: naver.maps.Coord | naver.maps.CoordLiteral;
    radius?: number;
    strokeWeight?: number;
    strokeOpacity?: number;
    strokeColor?: string;
    strokeStyle?: naver.maps.strokeStyleType;
    strokeLineCap?: naver.maps.strokeLineCapType;
    strokeLineJoin?: naver.maps.strokeLineJoinType;
    fillColor?: string;
    fillOpacity?: number;
    clickable?: boolean;
    visible?: boolean;
    zIndex?: number;
};
declare type Props = CircleOptions & {
    onCenterChanged?: (value: naver.maps.Coord) => void;
    onRadiusChanged?: (value: number) => void;
    onStrokeWeightChanged?: (value: number) => void;
    onStrokeOpacityChanged?: (value: number) => void;
    onStrokeColorChanged?: (value: string) => void;
    onStrokeStyleChanged?: (value: naver.maps.strokeStyleType) => void;
    onStrokeLineCapChanged?: (value: naver.maps.strokeLineCapType) => void;
    onStrokeLineJoinChanged?: (value: naver.maps.strokeLineJoinType) => void;
    onFillColorChanged?: (value: string) => void;
    onFillOpacityChanged?: (value: number) => void;
    onClickableChanged?: (event: boolean) => void;
    onVisibleChanged?: (event: boolean) => void;
    onZIndexChanged?: (event: number) => void;
} & UIEventHandlers<typeof uiEvents>;
declare const Circle: react.ForwardRefExoticComponent<CircleOptions & {
    onCenterChanged?: ((value: naver.maps.Coord) => void) | undefined;
    onRadiusChanged?: ((value: number) => void) | undefined;
    onStrokeWeightChanged?: ((value: number) => void) | undefined;
    onStrokeOpacityChanged?: ((value: number) => void) | undefined;
    onStrokeColorChanged?: ((value: string) => void) | undefined;
    onStrokeStyleChanged?: ((value: naver.maps.strokeStyleType) => void) | undefined;
    onStrokeLineCapChanged?: ((value: naver.maps.strokeLineCapType) => void) | undefined;
    onStrokeLineJoinChanged?: ((value: naver.maps.strokeLineJoinType) => void) | undefined;
    onFillColorChanged?: ((value: string) => void) | undefined;
    onFillOpacityChanged?: ((value: number) => void) | undefined;
    onClickableChanged?: ((event: boolean) => void) | undefined;
    onVisibleChanged?: ((event: boolean) => void) | undefined;
    onZIndexChanged?: ((event: number) => void) | undefined;
} & Partial<Record<"onClick" | "onMousedown" | "onMouseup" | "onDblclick" | "onRightclick" | "onMouseover" | "onMouseout" | "onMousemove", (e: naver.maps.PointerEvent) => void>> & react.RefAttributes<naver.maps.Circle>>;

export { Circle, Props };
