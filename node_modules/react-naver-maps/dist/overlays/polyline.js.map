{"version":3,"sources":["../../src/overlays/polyline.tsx","../../src/helpers/event.tsx","../../src/listener.tsx","../../src/contexts/event-target.ts","../../src/overlay.tsx","../../src/contexts/naver-map.ts","../../src/use-navermaps.ts","../../src/contexts/client-options.ts","../../src/load-navermaps-script.tsx","../../src/utils/load-script.ts","../../src/utils/omit-undefined.ts"],"sourcesContent":["import pick from 'lodash.pick';\nimport { forwardRef, useEffect, useImperativeHandle, useState } from 'react';\n\nimport { HandleEvents } from '../helpers/event';\nimport { Overlay } from '../overlay';\nimport type { UIEventHandlers } from '../types/event';\nimport { useNavermaps } from '../use-navermaps';\nimport { omitUndefined } from '../utils/omit-undefined';\n\nconst kvoKeys = [\n  'path',\n  'strokeWeight',\n  'strokeOpacity',\n  'strokeColor',\n  'strokeStyle',\n  'strokeLineCap',\n  'strokeLineJoin',\n  'clickable',\n  'visible',\n  'zIndex',\n  'startIcon',\n  'startIconSize',\n  'endIcon',\n  'endIconSize',\n] as const;\nconst kvoEvents = kvoKeys.map(key => `${key}_changed`);\nconst uiEvents = [\n  'mousedown',\n  'mouseup',\n  'click',\n  'dblclick',\n  'rightclick',\n  'mouseover',\n  'mouseout',\n  'mousemove',\n] as const;\nconst events = [...uiEvents, ...kvoEvents];\n\ntype PolylineOptions = {\n  /**\n   * @type naver.maps.ArrayOfCoords | naver.maps.KVOArrayOfCoords | naver.maps.ArrayOfCoordsLiteral\n   */\n  path: naver.maps.ArrayOfCoords | naver.maps.KVOArrayOfCoords | naver.maps.ArrayOfCoordsLiteral;\n  strokeWeight?: number;\n  strokeOpacity?: number;\n  strokeColor?: string;\n  strokeStyle?: naver.maps.strokeStyleType;\n  strokeLineCap?: naver.maps.strokeLineCapType;\n  strokeLineJoin?: naver.maps.strokeLineJoinType;\n  clickable?: boolean;\n  visible?: boolean;\n  zIndex?: number;\n  startIcon?: naver.maps.PointingIcon;\n  startIconSize?: number;\n  endIcon?: naver.maps.PointingIcon;\n  endIconSize?: number;\n};\n\nexport type Props = PolylineOptions & {\n  onPathChanged?: (value: naver.maps.ArrayOfCoords) => void;\n  onStrokeWeightChanged?: (value: number) => void;\n  onStrokeOpacityChanged?: (value: number) => void;\n  onStrokeColorChanged?: (value: string) => void;\n  onStrokeStyleChanged?: (value: naver.maps.strokeStyleType) => void;\n  onStrokeLineCapChanged?: (value: naver.maps.strokeLineCapType) => void;\n  onStrokeLineJoinChanged?: (value: naver.maps.strokeLineJoinType) => void;\n  onClickableChanged?: (value: boolean) => void;\n  onVisibleChanged?: (value: boolean) => void;\n  onZIndexChanged?: (value: number) => void;\n  onStartIconChanged?: (value: naver.maps.PointingIcon) => void;\n  onStartIconSizeChanged?: (number: string) => void;\n  onEndIconChanged?: (value: naver.maps.PointingIcon) => void;\n  onEndIconSizeChanged?: (number: string) => void;\n} & UIEventHandlers<typeof uiEvents>;\n\nexport const Polyline = forwardRef<naver.maps.Polyline, Props>(function Polyline(props, ref) {\n  const options = pick(props, [...kvoKeys]);\n  const navermaps = useNavermaps();\n  const [polyline] = useState(() => new navermaps.Polyline(options));\n\n  useImperativeHandle<naver.maps.Polyline | undefined, naver.maps.Polyline | undefined>(ref, () => polyline);\n\n  useEffect(() => {\n    polyline.setOptions(omitUndefined(options) as PolylineOptions); // TODO: FIX DefinilyTyped. setOptions의 assign type 은 Partial<Options> 이어야 함\n  }, kvoKeys.map(key => options[key]));\n\n  return (\n    <Overlay element={polyline}>\n      <HandleEvents events={events} listeners={props as any} />\n    </Overlay>\n  );\n});\n","\nimport camelcase from 'camelcase';\nimport pick from 'lodash.pick';\nimport { useMemo } from 'react';\n\nimport { Listener } from '../listener';\n\ntype Props = {\n  events: string[];\n  listeners: Record<string, (...args: any[]) => any>;\n};\n\nexport function HandleEvents(props: Props) {\n  const { events, listeners: _listeners } = props;\n\n  const eventMap = useMemo(() => createEventMap(events), events);\n  const listeners = pick(_listeners, Object.keys(eventMap)) as unknown as Record<string, (e: any) => void>;\n\n  return (\n    <>\n      {Object.keys(listeners).map(key => {\n\n        const eventName = eventMap[key];\n        const listener = listeners[key];\n\n        return listener ? <Listener\n          key={key}\n          type={eventName}\n          listener={listener}\n        /> : null;\n      })}\n    </>\n  );\n}\n\n\nfunction createEventMap(events: string[]): Record<string, string> {\n  return events.reduce((acc, eventName) => {\n    const key = camelcase(`on_${eventName}`);\n\n    return {\n      [key]: eventName,\n      ...acc,\n    };\n  }, {});\n}\n","import { useEffect } from 'react';\nimport type { FunctionComponent } from 'react';\n\nimport { useEventTarget } from './contexts/event-target';\nimport type { AllowedKey } from './types/utils';\n\nexport function useListener(target: any, type: string, listener: (...args: any[]) => void) {\n  useEffect(() => {\n    const _listener = (...args: any[]) => listener(...args, target);\n    const mapEventListener = naver.maps.Event.addListener(target, type, _listener);\n\n    return () => {\n      naver.maps.Event.removeListener(mapEventListener);\n    };\n  }, [target, type, listener]);\n}\n\nexport interface Props {\n  target?: any;\n  type: string;\n  listener: (...args: any[]) => any;\n}\n\nexport const Listener: FunctionComponent<Props> = (props) => {\n  const {\n    target: propTarget,\n    type,\n    listener,\n  } = props;\n\n  const contextTarget = useEventTarget();\n  const target = propTarget || contextTarget;\n  if (!target) {\n    throw new Error('react-naver-maps: No Target to add listener');\n  }\n\n  // TODO: FIX DefinitelyTyped\n  useListener((target as unknown) as EventTarget, type, listener);\n\n  return null;\n};\n\nexport function getListenerKeys<P extends Record<string, any>>(props: P) {\n  return Object.keys(props).filter(key => /on[A-Z]\\w+/.test(key)) as unknown as Array<AllowedKey<P, `on${string}`>>;\n}\n","import { createContext, useContext } from 'react';\n\nexport const EventTargetContext = createContext<any | undefined>(undefined);\nexport const useEventTarget: () => any | undefined = () => useContext(EventTargetContext);\n","import { useEffect } from 'react';\nimport type { ReactNode } from 'react';\n\nimport { EventTargetContext } from './contexts/event-target';\nimport { useMap } from './contexts/naver-map';\n\ntype MapElementType = {\n  setMap(map: naver.maps.Map | null): void;\n  getMap(): naver.maps.Map | null;\n};\n\nexport type Props = {\n  element: MapElementType;\n  children?: ReactNode;\n  autoMount?: boolean;\n};\n\nexport function Overlay(props: Props) {\n  const { element, children, autoMount = true } = props;\n  const nmap = useMap();\n\n  useEffect(() => {\n    if (!autoMount) {\n      return;\n    }\n\n    if (element.getMap() === nmap) {\n      return;\n    }\n\n    element.setMap(nmap ? nmap : null);\n    return () => {\n      element.setMap(null);\n    };\n  }, [nmap]);\n\n  return (\n    <EventTargetContext.Provider value={element}>\n      {children}\n    </EventTargetContext.Provider>\n  );\n}\n","import { createContext, useContext } from 'react';\n\nexport const NaverMapContext = createContext<naver.maps.Map | undefined>(undefined);\nexport const useMap: () => naver.maps.Map | undefined = () => useContext(NaverMapContext);\n","import { suspend } from 'suspend-react';\n\nimport { useClientOptions } from './contexts/client-options';\nimport { loadNavermapsScript } from './load-navermaps-script';\nimport type { ClientOptions } from './types/client';\n\nasync function load(options?: ClientOptions): Promise<typeof naver.maps> {\n  if (typeof window !== 'undefined' && window.naver?.maps) {\n    return window.naver.maps;\n  }\n\n  if (!options) {\n    throw new Error('react-naver-maps: set options with `useNavermaps.config`');\n  }\n\n  return await loadNavermapsScript(options);\n}\n\nexport function useNavermaps() {\n  if (typeof window === 'undefined') {\n    throw new Error('react-naver-maps: browser');\n  }\n\n  /**\n   * TODO: Provider option 이 변경될 경우 클리어하는 로직 필요\n   * ex) submodule 에 파노라마 추가시 window.naver.maps가 존재하므로 새로 로드하지 않음\n   */\n  if (window.naver?.maps) {\n    return window.naver.maps;\n  }\n\n  const options = useClientOptions();\n\n  return suspend(load, [options, 'react-naver-maps/loadClient']);\n}\n\n// useNavermaps.preload = (options: any) => {\n//   if (!window) {\n//     return;\n//   }\n\n//   return preload(load, [options, 'react-naver-maps/loadClient']);\n// };\n\n// useNavermaps.clear = (options: any) => {\n//   return clear([options, 'react-naver-maps/loadClient']);\n// };\n","import { createContext, useContext } from 'react';\n\nimport type { ClientOptions } from '../types/client';\n\nexport const ClientOptionsContext = createContext<ClientOptions>({} as ClientOptions);\nexport const useClientOptions = () => useContext(ClientOptionsContext);\n","import { useEffect, useState } from 'react';\nimport type { ReactElement } from 'react';\n\nimport type { ClientOptions } from './types/client';\nimport { loadScript } from './utils/load-script';\n\nexport function loadNavermapsScript(options: ClientOptions) {\n  const url = makeUrl(options);\n\n  // TODO: Caching Promise\n\n  const promise = loadScript(url).then(() => {\n    const navermaps = window.naver.maps;\n\n    if (navermaps.jsContentLoaded) {\n      return navermaps;\n    }\n\n    return new Promise<typeof naver.maps>(resolve => {\n      navermaps.onJSContentLoaded = () => {\n        resolve(navermaps);\n      };\n    });\n  });\n\n  return promise;\n}\n\nfunction makeUrl(options: ClientOptions) {\n  const submodules = options.submodules;\n\n  const clientIdQuery = 'ncpClientId' in options\n    ? `ncpClientId=${options.ncpClientId}`\n    : 'govClientId' in options\n      ? `govClientId=${options.govClientId}`\n      : 'finClientId' in options\n        ? `finClientId=${options.finClientId}`\n        : undefined;\n\n  if (!clientIdQuery) {\n    throw new Error('react-naver-maps: ncpClientId, govClientId or finClientId is required');\n  }\n\n  let url = `https://oapi.map.naver.com/openapi/v3/maps.js?${clientIdQuery}`;\n\n  if (submodules) {\n    url += `&submodules=${submodules.join(',')}`;\n  }\n\n  return url;\n}\n\ntype Props = ClientOptions & {\n  children: () => ReactElement;\n};\n\nexport function LoadNavermapsScript({\n  children: Children,\n  ...options\n}: Props) {\n  const [navermaps, setNavermaps] = useState<typeof naver.maps>();\n\n  useEffect(() => {\n    loadNavermapsScript(options).then((maps) => {\n      setNavermaps(maps);\n    });\n  }, []);\n\n  return (\n    (navermaps && Children) ? <Children /> : null\n  );\n}\n","import _loadScript from 'load-script';\n\nexport function loadScript(src: string): Promise<HTMLScriptElement> {\n  return new Promise((resolve, reject) => {\n    _loadScript(src, (err, script) => {\n      if (err) reject(err);\n      else resolve(script);\n    });\n  });\n}\n","export function omitUndefined<T extends Record<string, any>>(obj: T): Partial<T> {\n  return Object.keys(obj).reduce((acc, key) => {\n    if (obj[key] === 'undefined') {\n      return acc;\n    }\n    return {\n      ...acc,\n      [key]: obj[key],\n    };\n  }, {});\n}\n"],"mappings":"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","names":["import_lodash","import_react","import_react","import_react","events","pick","camelcase","import_react","import_react","import_jsx_runtime","import_react","import_react","_loadScript","import_jsx_runtime","import_jsx_runtime","Polyline","pick"]}