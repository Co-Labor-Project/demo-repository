import {
  ContainerContext
} from "./chunk-HTJMMZVM.mjs";

// src/container.tsx
import { Suspense, useEffect, useMemo, useRef, useState, createElement } from "react";
import { jsx, jsxs } from "react/jsx-runtime";
var innerDefaultStyle = { top: 0, left: 0, width: "100%", height: "100%", position: "absolute", zIndex: 0 };
function Container({ children, fallback, innerStyle = innerDefaultStyle, ...restProps }) {
  const ref = useRef(null);
  const [isMounted, setIsMounted] = useState(false);
  useEffect(() => {
    setIsMounted(true);
  }, []);
  const containerContext = useMemo(() => ({ element: ref.current }), [ref.current]);
  return /* @__PURE__ */ jsxs("div", {
    ...restProps,
    style: { position: "relative", ...restProps.style },
    children: [
      /* @__PURE__ */ jsx("div", {
        ref,
        style: innerStyle
      }, "mapdiv"),
      isMounted && ref.current ? /* @__PURE__ */ jsx(ContainerContext.Provider, {
        value: containerContext,
        children: /* @__PURE__ */ jsx(Suspense, {
          fallback: null,
          children: typeof children === "function" ? createElement(children) : children
        })
      }) : fallback
    ]
  });
}

export {
  Container
};
//# sourceMappingURL=chunk-XPTCQLXZ.mjs.map