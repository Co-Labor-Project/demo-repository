{"version":3,"sources":["../../src/helpers/event.tsx","../../src/listener.tsx","../../src/contexts/event-target.ts"],"sourcesContent":["\nimport camelcase from 'camelcase';\nimport pick from 'lodash.pick';\nimport { useMemo } from 'react';\n\nimport { Listener } from '../listener';\n\ntype Props = {\n  events: string[];\n  listeners: Record<string, (...args: any[]) => any>;\n};\n\nexport function HandleEvents(props: Props) {\n  const { events, listeners: _listeners } = props;\n\n  const eventMap = useMemo(() => createEventMap(events), events);\n  const listeners = pick(_listeners, Object.keys(eventMap)) as unknown as Record<string, (e: any) => void>;\n\n  return (\n    <>\n      {Object.keys(listeners).map(key => {\n\n        const eventName = eventMap[key];\n        const listener = listeners[key];\n\n        return listener ? <Listener\n          key={key}\n          type={eventName}\n          listener={listener}\n        /> : null;\n      })}\n    </>\n  );\n}\n\n\nfunction createEventMap(events: string[]): Record<string, string> {\n  return events.reduce((acc, eventName) => {\n    const key = camelcase(`on_${eventName}`);\n\n    return {\n      [key]: eventName,\n      ...acc,\n    };\n  }, {});\n}\n","import { useEffect } from 'react';\nimport type { FunctionComponent } from 'react';\n\nimport { useEventTarget } from './contexts/event-target';\nimport type { AllowedKey } from './types/utils';\n\nexport function useListener(target: any, type: string, listener: (...args: any[]) => void) {\n  useEffect(() => {\n    const _listener = (...args: any[]) => listener(...args, target);\n    const mapEventListener = naver.maps.Event.addListener(target, type, _listener);\n\n    return () => {\n      naver.maps.Event.removeListener(mapEventListener);\n    };\n  }, [target, type, listener]);\n}\n\nexport interface Props {\n  target?: any;\n  type: string;\n  listener: (...args: any[]) => any;\n}\n\nexport const Listener: FunctionComponent<Props> = (props) => {\n  const {\n    target: propTarget,\n    type,\n    listener,\n  } = props;\n\n  const contextTarget = useEventTarget();\n  const target = propTarget || contextTarget;\n  if (!target) {\n    throw new Error('react-naver-maps: No Target to add listener');\n  }\n\n  // TODO: FIX DefinitelyTyped\n  useListener((target as unknown) as EventTarget, type, listener);\n\n  return null;\n};\n\nexport function getListenerKeys<P extends Record<string, any>>(props: P) {\n  return Object.keys(props).filter(key => /on[A-Z]\\w+/.test(key)) as unknown as Array<AllowedKey<P, `on${string}`>>;\n}\n","import { createContext, useContext } from 'react';\n\nexport const EventTargetContext = createContext<any | undefined>(undefined);\nexport const useEventTarget: () => any | undefined = () => useContext(EventTargetContext);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,uBAAsB;AACtB,oBAAiB;AACjB,IAAAA,gBAAwB;;;ACHxB,IAAAC,gBAA0B;;;ACA1B,mBAA0C;AAEnC,IAAM,yBAAqB,4BAA+B,MAAS;AACnE,IAAM,iBAAwC,UAAM,yBAAW,kBAAkB;;;ADGjF,SAAS,YAAY,QAAa,MAAc,UAAoC;AACzF,+BAAU,MAAM;AACd,UAAM,YAAY,IAAI,SAAgB,SAAS,GAAG,MAAM,MAAM;AAC9D,UAAM,mBAAmB,MAAM,KAAK,MAAM,YAAY,QAAQ,MAAM,SAAS;AAE7E,WAAO,MAAM;AACX,YAAM,KAAK,MAAM,eAAe,gBAAgB;AAAA,IAClD;AAAA,EACF,GAAG,CAAC,QAAQ,MAAM,QAAQ,CAAC;AAC7B;AAQO,IAAM,WAAqC,CAAC,UAAU;AAC3D,QAAM;AAAA,IACJ,QAAQ;AAAA,IACR;AAAA,IACA;AAAA,EACF,IAAI;AAEJ,QAAM,gBAAgB,eAAe;AACrC,QAAM,SAAS,cAAc;AAC7B,MAAI,CAAC,QAAQ;AACX,UAAM,IAAI,MAAM,6CAA6C;AAAA,EAC/D;AAGA,cAAa,QAAmC,MAAM,QAAQ;AAE9D,SAAO;AACT;;;ADrBI;AAPG,SAAS,aAAa,OAAc;AACzC,QAAM,EAAE,QAAQ,WAAW,WAAW,IAAI;AAE1C,QAAM,eAAW,uBAAQ,MAAM,eAAe,MAAM,GAAG,MAAM;AAC7D,QAAM,gBAAY,cAAAC,SAAK,YAAY,OAAO,KAAK,QAAQ,CAAC;AAExD,SACE;AAAA,IACG,iBAAO,KAAK,SAAS,EAAE,IAAI,SAAO;AAEjC,YAAM,YAAY,SAAS;AAC3B,YAAM,WAAW,UAAU;AAE3B,aAAO,WAAW,4CAAC;AAAA,QAEjB,MAAM;AAAA,QACN;AAAA,SAFK,GAGP,IAAK;AAAA,IACP,CAAC;AAAA,GACH;AAEJ;AAGA,SAAS,eAAe,QAA0C;AAChE,SAAO,OAAO,OAAO,CAAC,KAAK,cAAc;AACvC,UAAM,UAAM,iBAAAC,SAAU,MAAM,WAAW;AAEvC,WAAO;AAAA,MACL,CAAC,MAAM;AAAA,MACP,GAAG;AAAA,IACL;AAAA,EACF,GAAG,CAAC,CAAC;AACP;","names":["import_react","import_react","pick","camelcase"]}