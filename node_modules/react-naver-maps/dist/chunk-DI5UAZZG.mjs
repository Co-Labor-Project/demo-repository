import {
  omitUndefined
} from "./chunk-RVDAKL7Q.mjs";
import {
  useNavermaps
} from "./chunk-SENI7KNJ.mjs";
import {
  HandleEvents
} from "./chunk-533MYCRP.mjs";
import {
  Overlay
} from "./chunk-IV7GZJYG.mjs";

// src/overlays/circle.tsx
import pick from "lodash.pick";
import { forwardRef, useEffect, useImperativeHandle, useState } from "react";
import { jsx } from "react/jsx-runtime";
var primitiveKvoKeys = [
  "radius",
  "strokeWeight",
  "strokeOpacity",
  "strokeColor",
  "strokeStyle",
  "strokeLineCap",
  "strokeLineJoin",
  "fillColor",
  "fillOpacity",
  "clickable",
  "visible",
  "zIndex"
];
var kvoKeys = [
  ...primitiveKvoKeys,
  "center"
];
var kvoEvents = kvoKeys.map((key) => `${key}_changed`);
var uiEvents = [
  "mousedown",
  "mouseup",
  "click",
  "dblclick",
  "rightclick",
  "mouseover",
  "mouseout",
  "mousemove"
];
var events = [...uiEvents, ...kvoEvents];
var Circle = forwardRef(function Circle2(props, ref) {
  const { center } = props;
  const navermaps = useNavermaps();
  const [circle] = useState(() => new navermaps.Circle(omitUndefined(pick(props, [...kvoKeys]))));
  useImperativeHandle(ref, () => circle);
  useEffect(() => {
    if (center && !circle.getCenter().equals(center)) {
      circle.setCenter(center);
    }
  }, [center]);
  useEffect(() => {
    circle.setOptions(omitUndefined(pick(props, primitiveKvoKeys)));
  }, primitiveKvoKeys.map((key) => props[key]));
  return /* @__PURE__ */ jsx(Overlay, {
    element: circle,
    children: /* @__PURE__ */ jsx(HandleEvents, {
      events,
      listeners: props
    })
  });
});

export {
  Circle
};
//# sourceMappingURL=chunk-DI5UAZZG.mjs.map