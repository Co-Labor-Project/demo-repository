import {
  omitUndefined
} from "./chunk-RVDAKL7Q.mjs";
import {
  useNavermaps
} from "./chunk-SENI7KNJ.mjs";
import {
  HandleEvents
} from "./chunk-533MYCRP.mjs";
import {
  Overlay
} from "./chunk-IV7GZJYG.mjs";

// src/overlays/info-window.tsx
import pick from "lodash.pick";
import { forwardRef, useEffect, useImperativeHandle, useState } from "react";
import { jsx } from "react/jsx-runtime";
var primitiveKvoKeys = [
  "content",
  "zIndex",
  "maxWidth",
  "pixelOffset",
  "backgroundColor",
  "borderColor",
  "borderWidth",
  "disableAutoPan",
  "disableAnchor",
  "anchorSkew",
  "anchorSize",
  "anchorColor"
];
var kvoKeys = [
  ...primitiveKvoKeys,
  "position"
];
var kvoEvents = kvoKeys.map((key) => `${key}_changed`);
var uiEvents = [
  "mousedown",
  "mouseup",
  "click",
  "dblclick",
  "rightclick",
  "mouseover",
  "mouseout",
  "mousemove"
];
var events = [...uiEvents, ...kvoEvents];
var InfoWindow = forwardRef(function InfoWindow2(props, ref) {
  const { position } = props;
  const navermaps = useNavermaps();
  const [infoWindow] = useState(() => new navermaps.InfoWindow(omitUndefined(pick(props, [...kvoKeys]))));
  useImperativeHandle(ref, () => infoWindow);
  useEffect(() => {
    infoWindow.setOptions(omitUndefined(pick(props, primitiveKvoKeys)));
  }, primitiveKvoKeys.map((key) => props[key]));
  useEffect(() => {
    if (position && infoWindow.getPosition().equals(position)) {
      infoWindow.setPosition(position);
    }
  }, [position]);
  return /* @__PURE__ */ jsx(Overlay, {
    element: infoWindow,
    autoMount: false,
    children: /* @__PURE__ */ jsx(HandleEvents, {
      events,
      listeners: props
    })
  });
});

export {
  InfoWindow
};
//# sourceMappingURL=chunk-ICJYIRUO.mjs.map